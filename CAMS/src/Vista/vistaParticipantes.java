/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.util.Stack;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumn;

/**
 *
 * @author alber
 */
public class vistaParticipantes extends javax.swing.JFrame {

    String matrizParticipantes[][] = new String[20][6];
    vistaConfirmacionParticipantes confirmacion = new vistaConfirmacionParticipantes();

    /**
     * Creates new form vistaParticipantes
     */
    public vistaParticipantes() {
        initComponents();
        this.setLocationRelativeTo(null);
        btnTerminar.setEnabled(false);
        //Icono y titulo del frame
        Image icono = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("Imagenes/logoCAMS.png"));
        this.setIconImage(icono);
        this.setTitle("Concurso Anual de Matem치ticas del Sureste");
        setExtendedState(MAXIMIZED_BOTH);
        jTableParticipantes.getTableHeader().setPreferredSize(new Dimension(10,40));
        jTableParticipantes.getTableHeader().setFont(new Font("Verdana", Font.BOLD, 30));
        
    }

    public String[][] getMatrizParticipantes() {
        return matrizParticipantes;
    }

    public void setMatrizParticipantes(String[][] matrizParticipantes) {
        this.matrizParticipantes = matrizParticipantes;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableParticipantes = new javax.swing.JTable();
        btnTerminar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTableParticipantes.setFont(new java.awt.Font("Tahoma", 1, 19)); // NOI18N
        jTableParticipantes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableParticipantes.setMaximumSize(new java.awt.Dimension(500, 500));
        jTableParticipantes.setMinimumSize(new java.awt.Dimension(500, 380));
        jTableParticipantes.setPreferredSize(new java.awt.Dimension(500, 900));
        jTableParticipantes.setRowHeight(45);
        jTableParticipantes.setRowSelectionAllowed(false);
        jTableParticipantes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableParticipantesMouseClicked(evt);
            }
        });
        jTableParticipantes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableParticipantesKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTableParticipantes);

        btnTerminar.setBackground(new java.awt.Color(51, 204, 255));
        btnTerminar.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        btnTerminar.setText("Terminar");
        btnTerminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTerminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(btnTerminar)
                .addContainerGap(811, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnTerminar)
                .addGap(37, 37, 37))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void btnTerminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTerminarActionPerformed
        int cantidad = numRegistrosSeleccionados();
        if (cantidad == 10) {
            //generarParejasAleatorias();
            //matrizSeleccionados();
            this.setVisible(false);
            confirmacion.setMatrizParticipantes(getMatrizSeleccionados());
            confirmacion.setVisible(true);
        } else {
            if (cantidad < 10) {
                int resta = 10 - cantidad;
                if (resta != 1) {
                    JOptionPane.showMessageDialog(null, "Debe de seleccionar " + resta + " alumnos m치s");
                } else {
                    JOptionPane.showMessageDialog(null, "Debe de seleccionar " + resta + " alumno m치s");
                }
            } else {
                int resta = cantidad - 10;
                if (resta != 1) {
                    JOptionPane.showMessageDialog(null, "Debe de seleccionar " + resta + " alumnos menos");
                } else {
                    JOptionPane.showMessageDialog(null, "Debe de seleccionar " + resta + " alumno menos");
                }
            }
        }
    }//GEN-LAST:event_btnTerminarActionPerformed

    private void jTableParticipantesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableParticipantesMouseClicked
        int cantidad = numRegistrosSeleccionados();
        System.out.println("Cantidad Click es: " + cantidad);
        if (cantidad == 10) {
            btnTerminar.setEnabled(true);
        } else {
            btnTerminar.setEnabled(false);
        }
    }//GEN-LAST:event_jTableParticipantesMouseClicked

    private void jTableParticipantesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableParticipantesKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER || evt.getKeyCode() == KeyEvent.VK_SPACE) {
            int cantidad = numRegistrosSeleccionados();
            System.out.println("Registros" + cantidad);
            cantidad = numRegistrosSeleccionados();
            cantidad++; // Se aumenta 1 porque empieza a contar desde 0 cuando se presiona el check con alguna tecla.
            System.out.println("Cantidad es: " + cantidad);
            if (cantidad == 10) {
                System.out.println("Cantidad es: " + cantidad);
                btnTerminar.setEnabled(true);
            } else {
                btnTerminar.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jTableParticipantesKeyPressed

    public int numRegistrosSeleccionados() {
        int numRegistros = 0;
        for (int i = 0; i < jTableParticipantes.getRowCount(); i++) {
            String seleccion = String.valueOf(jTableParticipantes.getValueAt(i, 3));
            if (seleccion.equals("true")) {
                numRegistros++;
            }
        }
        return numRegistros;
    }

    public String[] generarParejasAleatorias() {
        int posicion;
        int numAlumnos = 10;
        Stack< Integer> parejas = new Stack< Integer>();
        String matrizParejas[] = new String[10];
        for (int i = 0; i < jTableParticipantes.getRowCount(); i++) {
            String seleccion = String.valueOf(jTableParticipantes.getValueAt(i, 3));
            if (seleccion.equals("true")) {
                String nombre = String.valueOf(jTableParticipantes.getValueAt(i, 0));
                posicion = (int) Math.floor(Math.random() * numAlumnos);
                while (parejas.contains(posicion)) {
                    posicion = (int) Math.floor(Math.random() * numAlumnos);
                }
                parejas.push(posicion);
                matrizParejas[posicion] = nombre;
            }
        }
        return matrizParejas;
    }

    //funci칩n que crea matriz con toda la informacion de los seleccionados (Nombre, escuela, estado, porcentaje)
    public String[][] getMatrizSeleccionados() {
        String seleccionados[] = generarParejasAleatorias();
        // definimos matriz con informaci칩n de los alumnos
        String infoAlumnos[][] = new String[10][4];
        for (int i = 0; i < 10; i++) {
            int j = 0;
            for (int k = 0; k < matrizParticipantes.length; k++) {
                if (seleccionados[i].equals(matrizParticipantes[k][0])) {
                    infoAlumnos[i][j] = matrizParticipantes[k][0]; //nombre
                    j++;
                    infoAlumnos[i][j] = matrizParticipantes[k][1]; // escuela
                    j++;
                    infoAlumnos[i][j] = matrizParticipantes[k][2]; //estado
                    j++;
                    infoAlumnos[i][j] = matrizParticipantes[k][4]; //promedio                    
                    break;
                }
            }
        }
        return infoAlumnos;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(vistaParticipantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(vistaParticipantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(vistaParticipantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(vistaParticipantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                vistaParticipantes vista = new vistaParticipantes();
                vista.setVisible(true);

            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnTerminar;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTableParticipantes;
    // End of variables declaration//GEN-END:variables

    public void agregarCheckBox(int columna, JTable tabla) {
        TableColumn tc = tabla.getColumnModel().getColumn(columna);
        tc.setCellEditor(tabla.getDefaultEditor(Boolean.class));
        tc.setCellRenderer(tabla.getDefaultRenderer(Boolean.class));
    }

    public boolean isSelected(int row, int column, JTable tabla) {
        return tabla.getValueAt(row, column) != null;
    }
}
