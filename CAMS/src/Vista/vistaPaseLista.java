/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Modelo.manipularCSV;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.WindowEvent;
import java.io.File;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author alber
 */
public class vistaPaseLista extends javax.swing.JFrame {

    manipularCSV modelo = new manipularCSV();
    vistaParticipantes viewParticipantes = new vistaParticipantes();
    vistaParejas viewParejas = new vistaParejas();
    vistaProblemas viewProblemas = new vistaProblemas();
    vistaSeleccionados viewSeleccionados = new vistaSeleccionados();
    /**
     * Creates new form vistaPaseLista
     */
    imagenFondo fondo = new imagenFondo();

    public vistaPaseLista() {
        this.setContentPane(fondo);
        initComponents();
        setExtendedState(MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboBoxArchivo = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName(""); // NOI18N

        comboBoxArchivo.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        comboBoxArchivo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Pasar lista", "Problemas", "Problemas extras", "Salir" }));
        comboBoxArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxArchivoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(comboBoxArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 404, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(comboBoxArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 405, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxArchivoActionPerformed
        String opcion = this.comboBoxArchivo.getSelectedItem().toString();
        String rutaArchivos = modelo.obtenerRutaArchivos();
        switch (opcion) {
            case "Pasar lista":

                File ficheroParejas = new File(modelo.obtenerRutaGuardadoArchivos() + "\\PAREJAS.csv");
                if (ficheroParejas.exists()) {
                    ficheroParejas.delete();
                }

                File ficheroImpParejas = new File(modelo.obtenerRutaGuardadoArchivos() + "\\IMPRESION_PAREJAS.csv");
                if (ficheroImpParejas.exists()) {
                    ficheroImpParejas.delete();
                }

                String matrizParticipantes[][] = modelo.leerArchivo(rutaArchivos + "\\PARTICIPANTES.csv");
                DefaultTableModel tabla = modelo.leerCSV(rutaArchivos + "\\PARTICIPANTES.csv");

                viewParticipantes.setMatrizParticipantes(matrizParticipantes);
                viewParticipantes.jTableParticipantes.setModel(tabla);

                TableColumn newColumn1 = viewParticipantes.jTableParticipantes.getColumnModel().getColumn(0);
                newColumn1.setPreferredWidth(205);
                newColumn1.setWidth(205);
                TableColumn newColumn2 = viewParticipantes.jTableParticipantes.getColumnModel().getColumn(1);
                newColumn2.setPreferredWidth(205);
                newColumn2.setWidth(205);
                TableColumn newColumn3 = viewParticipantes.jTableParticipantes.getColumnModel().getColumn(2);
                newColumn3.setPreferredWidth(20);
                newColumn3.setWidth(20);
                TableColumn newColumn4 = viewParticipantes.jTableParticipantes.getColumnModel().getColumn(3);
                newColumn4.setPreferredWidth(20);
                newColumn4.setWidth(20);

                viewParticipantes.agregarCheckBox(3, viewParticipantes.jTableParticipantes);
                viewParticipantes.setVisible(true);

                break;
            case "Problemas":
                String rutaArchivos2 = modelo.obtenerRutaGuardadoArchivos().replaceAll("\\\\", "/");
                File existeArchivo = new File(rutaArchivos2 + "/PAREJAS.csv");
                if (existeArchivo.exists()) {
                    // Si existe vamos al visualizador
                    String[][] matriz = modelo.leerArchivo(modelo.obtenerRutaArchivos() + "\\orden_rpp.txt");
                    viewProblemas.setMatrizOrdenRPP(matriz);
                    viewProblemas.setMatrizNombreParejas(crearMatrizParejas());
                    viewProblemas.setVisible(true);
                } else {
                    // Si no existe mandamos un mensaje
                    JOptionPane.showMessageDialog(null, "Â¡Debe de realizar el Pase de Lista primero!");
                }
                break;
            case "Problemas extras":
                String matrizParejas[][] = modelo.leerArchivo(modelo.obtenerRutaGuardadoArchivos() + "\\PAREJAS.csv");
                String matrizSeleccionados[][] = modelo.crearMatrizSeleccionados(matrizParejas);
                File fichero = new File(modelo.obtenerRutaGuardadoArchivos() + "\\SELECCIONADOS.csv");
                //Si existe el archivo lo borra
                if (fichero.exists()) {
                    fichero.delete();
                }
                // creamos el .csv de los estudiantes seleccionados
                modelo.escribirEnFichero(matrizSeleccionados, modelo.obtenerRutaGuardadoArchivos(), "SELECCIONADOS", "csv");
                DefaultTableModel tablaSeleccionados = modelo.leerCSV(modelo.obtenerRutaGuardadoArchivos() + "\\SELECCIONADOS.csv");

                viewSeleccionados.jTableSeleccionados.setModel(tablaSeleccionados);
                
                TableColumn newColumn5 =  viewSeleccionados.jTableSeleccionados.getColumnModel().getColumn(0);
                newColumn5.setPreferredWidth(205);
                newColumn5.setWidth(205);
                TableColumn newColumn6 =  viewSeleccionados.jTableSeleccionados.getColumnModel().getColumn(1);
                newColumn6.setPreferredWidth(205);
                newColumn6.setWidth(205);
                TableColumn newColumn7 =  viewSeleccionados.jTableSeleccionados.getColumnModel().getColumn(2);
                newColumn7.setPreferredWidth(20);
                newColumn7.setWidth(20);
                TableColumn newColumn8 =  viewSeleccionados.jTableSeleccionados.getColumnModel().getColumn(3);
                newColumn8.setPreferredWidth(20);
                newColumn8.setWidth(20);
                
                viewSeleccionados.agregarCheckBox(3, viewSeleccionados.jTableSeleccionados);
                viewSeleccionados.setVisible(true);
                break;
            case "Salir":
                System.exit(0);
                break;
        }
    }//GEN-LAST:event_comboBoxArchivoActionPerformed

    public String[][] crearMatrizParejas() {
        String[][] matrizPAREJAS = modelo.leerArchivo(modelo.obtenerRutaGuardadoArchivos()+ "\\PAREJAS.csv");
        String[][] matrizNombreParejas = new String[5][2];
        for (int i = 0; i < matrizNombreParejas.length; i++) {
            int k = 0;
            for (int j = 0; j < matrizNombreParejas[i].length; j++) {
                matrizNombreParejas[i][j] = matrizPAREJAS[i][k];
                k = k + 4;
            }
        }
        return matrizNombreParejas;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(vistaPaseLista.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(vistaPaseLista.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(vistaPaseLista.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(vistaPaseLista.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new vistaPaseLista().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JComboBox comboBoxArchivo;
    // End of variables declaration//GEN-END:variables

    //clase para poner de fondo una imagen en el JFrame
    class imagenFondo extends JPanel {

        private Image img;

        @Override
        public void paint(Graphics g) {
            img = new ImageIcon(getClass().getResource("/Imagenes/logoCAMS.png")).getImage();

            g.drawImage(img, 0, 0, getWidth(), getHeight(), this);
            setOpaque(false);
            super.paint(g);
        }
    }
}
